apply plugin: 'java'

jar {
    manifest {
        attributes 'Main-Class': 'com.example.json.code.JocTest'
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/codemodel-2.6.jar')
}
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

archivesBaseName = "joc_enum_gen_tools"  //不写的话 就是项目名称＋版本号
repositories {
    mavenCentral()
}
//依赖编译，然后打包JAR
task taskJar(type: Jar, dependsOn: compileJava) {
    from 'build/classes'
    destinationDir = file('build/libs')
}

//清除上次的编译过的文件
task clearPj(type: Delete) {
    delete 'build', 'target'
}

//把JAR复制到目标目录
task release(type: Copy, dependsOn: [clearPj, taskJar]) {
    from('build/libs') {
        include '*.jar'
    }
    into('target')
}

task ts {
    // Print Date
    def mydate = new java.util.Date()
    println mydate
//Iterate through a map
    def numbersMAP = ['1': 'ONE', '2': 'TWO']
    for (entry in numbersMAP) {
        println "${entry.key} = ${entry.value}"
    }
//Introducing the range
    def range = 'a'..'d'
//Lists
    def numberlist = [1, 2, 3, 4, 5, 6, 7, 8]
    println numberlist;
    println "Maximum value: ${numberlist.max()}"

    for (int i = 0; i < 10; i++) {
        java.lang.System.out.println(i);
    }

    def file = new File("D:\\a")
    file.withOutputStream {os->os<<"abc"}
    file.eachLine {a -> println(a)}
    def fi=file.newInputStream();
    def fs=fi.getText();
    println(new String(file.getBytes()));
}

